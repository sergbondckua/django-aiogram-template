import logging

from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery)
from aiogram.utils.deep_linking import get_start_link
from aiogram import types
from aiogram.utils.markdown import text, hbold, quote_html, hcode
from asgiref.sync import sync_to_async

from loader import dp, _
from robot.models import TelegramUser
from robot.utils.weather import GisMeteoWeatherReport


@dp.message_handler(commands=["myid", "my_id"])
async def cmd_info_id(message: types.Message):
    """
    Return user ID information
    –ü–æ–≤–µ—Ä—Ç–∞—î ID-—ñ–Ω—Ñ–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    """

    full_name = message.from_user.full_name
    userid = message.from_user.id
    chat_id = message.chat.id
    username = message.from_user.mention if message.from_user.mention else "‚ûñ"

    if types.ChatType.PRIVATE != message.chat.type:
        title = message.chat.title
    else:
        title = full_name

    msg = text(
        hbold(_("Your ID information:")),
        text("üöª", hbold(_("Full name:")), quote_html(full_name)),
        text("ü™™", hbold(_("Username:")), quote_html(username)),
        text("üÜî", hbold(_("Your ID:")), hcode(userid)),
        text("üí¨", hbold(_("Chat ID:")), hcode(chat_id)),
        text("üî∏", hbold(_("Title:")), hcode(title)),
        sep="\n",
    )
    await types.ChatActions.typing()
    await message.answer(text=msg)


# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫
@dp.message_handler(commands=["ref"])
async def get_ref(message: types.Message):
    link = await get_start_link("urlpay", encode=False)
    await message.answer(f"–í–∞—à–∞ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞ {link}")


@dp.message_handler(commands="lang")
async def cmd_lang(message: types.Message):
    # –û—Ç–¥–∞–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–æ–≤
    languages_markup = InlineKeyboardMarkup(
        inline_keyboard=
        [
            [
                InlineKeyboardButton(
                    text=_("English"), callback_data="lang_en"),
                InlineKeyboardButton(
                    text=_("–£–∫—Ä–∞—ó–Ω—å—Å–∫–∞"), callback_data="lang_uk"),
            ]
        ]
    )
    # For setting custom lang you have to modify i18n middleware
    await message.answer(
        _("Your current language:"), reply_markup=languages_markup)


@dp.callback_query_handler(text_contains="lang")
async def change_language(call: CallbackQuery):
    await call.message.edit_reply_markup()
    await call.message.delete()
    # –î–æ—Å—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–∏–º–≤–æ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä ru)
    lang = call.data[-2:]
    await TelegramUser.objects.filter(userid=call.from_user.id).aupdate(
        language_code=lang
    )
    # –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –º—ã –ø–æ–º–µ–Ω—è–ª–∏ —è–∑—ã–∫, –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Å–µ –µ—â–µ —É–∫–∞–∑–∞–Ω —Å—Ç–∞—Ä—ã–π, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–¥–∞–µ–º locale=lang
    await call.message.answer(_("Your language has been changed", locale=lang))


@dp.message_handler(commands="weather")
async def cmd_weather(_: types.Message):
    """Command to weather"""
    if weather := await sync_to_async(
            GisMeteoWeatherReport().get_weather_forecast)():
        for chat_id, msg_forecast in weather.items():
            await dp.bot.send_message(chat_id=chat_id, text=msg_forecast)

    logging.info(
        "Weather information is not available to the request conditions")
